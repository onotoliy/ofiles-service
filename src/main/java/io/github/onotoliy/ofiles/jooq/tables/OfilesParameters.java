/*
 * This file is generated by jOOQ.
 */
package io.github.onotoliy.ofiles.jooq.tables;


import io.github.onotoliy.ofiles.jooq.DefaultSchema;
import io.github.onotoliy.ofiles.jooq.Keys;
import io.github.onotoliy.ofiles.jooq.tables.records.OfilesParametersRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfilesParameters extends TableImpl<OfilesParametersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>OFILES_PARAMETERS</code>
     */
    public static final OfilesParameters OFILES_PARAMETERS = new OfilesParameters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfilesParametersRecord> getRecordType() {
        return OfilesParametersRecord.class;
    }

    /**
     * The column <code>OFILES_PARAMETERS.UID</code>.
     */
    public final TableField<OfilesParametersRecord, UUID> UID = createField(DSL.name("UID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>OFILES_PARAMETERS.INFO_UID</code>.
     */
    public final TableField<OfilesParametersRecord, UUID> INFO_UID = createField(DSL.name("INFO_UID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>OFILES_PARAMETERS.NAME</code>.
     */
    public final TableField<OfilesParametersRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>OFILES_PARAMETERS.VALUE</code>.
     */
    public final TableField<OfilesParametersRecord, String> VALUE = createField(DSL.name("VALUE"), SQLDataType.VARCHAR(2147483647), this, "");

    private OfilesParameters(Name alias, Table<OfilesParametersRecord> aliased) {
        this(alias, aliased, null);
    }

    private OfilesParameters(Name alias, Table<OfilesParametersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>OFILES_PARAMETERS</code> table reference
     */
    public OfilesParameters(String alias) {
        this(DSL.name(alias), OFILES_PARAMETERS);
    }

    /**
     * Create an aliased <code>OFILES_PARAMETERS</code> table reference
     */
    public OfilesParameters(Name alias) {
        this(alias, OFILES_PARAMETERS);
    }

    /**
     * Create a <code>OFILES_PARAMETERS</code> table reference
     */
    public OfilesParameters() {
        this(DSL.name("OFILES_PARAMETERS"), null);
    }

    public <O extends Record> OfilesParameters(Table<O> child, ForeignKey<O, OfilesParametersRecord> key) {
        super(child, key, OFILES_PARAMETERS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OfilesParametersRecord> getPrimaryKey() {
        return Keys.PK_OFILES_PARAMETERS;
    }

    @Override
    public List<UniqueKey<OfilesParametersRecord>> getKeys() {
        return Arrays.<UniqueKey<OfilesParametersRecord>>asList(Keys.PK_OFILES_PARAMETERS);
    }

    @Override
    public List<ForeignKey<OfilesParametersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OfilesParametersRecord, ?>>asList(Keys.OFILES_INFO_PARAMETERS);
    }

    private transient OfilesInfo _ofilesInfo;

    public OfilesInfo ofilesInfo() {
        if (_ofilesInfo == null)
            _ofilesInfo = new OfilesInfo(this, Keys.OFILES_INFO_PARAMETERS);

        return _ofilesInfo;
    }

    @Override
    public OfilesParameters as(String alias) {
        return new OfilesParameters(DSL.name(alias), this);
    }

    @Override
    public OfilesParameters as(Name alias) {
        return new OfilesParameters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OfilesParameters rename(String name) {
        return new OfilesParameters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OfilesParameters rename(Name name) {
        return new OfilesParameters(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
